terraform {
  backend "s3" {
    #This replaces the local with an 23 bucket for state location
    bucket = "z-terraform-up-and-running-state"
    key = "stage/services/webserver-cluster/terraform.tfstate"
    region = "us-east-1"

    dynamodb_table = "terraform-up-and-running-locks"
    encrypt = true
  }
}
provider "aws" {
    region = "us-east-1"
}

data "terraform_remote_state" "db"{
  backend  = "s3"

  config {
    bucket = "z-terraform-up-and-running-state"
    key = "stage/data-stores/mysql/terraform.tfstate"
    region = us-east-1
  }
}

data "template_file" "user_data"{
  template = file("user-data.sh")

  vars = {
    server_port = var.server_port
    db_address = data.terraform_remote_state.db.outputs.address
    db_port = data.terraform_remote_state.db.outputs.port
  }
}

resource "aws_instance" "example" {
    #ami =  "ami-062f7200baf2fa504"
    ami = "ami-04b9e92b5572fa0d1"
    instance_type = "t2.micro"
    vpc_security_group_ids = [aws_security_group.instance.id]
    key_name = "id_rsa"
    user_data = <<-EOF
            #!/bin/bash
            echo "Hello, World!" >> index.html
            echo "${data.terraform_remote_state.db.outputs.address}" >> index.html
            echo "${data.terraform_remote_state.db.outputs.port}" >> index.html
            nohup busybox httpd -f -p ${var.server_port} &
            EOF

    tags = {
        Name = "terraform-example"
    }

}

resource "aws_security_group" "instance"{
    name = "terraform-example-instance"
    ingress {
        from_port = var.server_port
        to_port = var.server_port
        protocol = "tcp"
        cidr_blocks = [ "0.0.0.0/0" ]
    }
}
